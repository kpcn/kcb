---
import { getCollection } from 'astro:content';
import { createSlug } from 'src/utils';

const blogEntries = await getCollection('blog');

// TODO: to change more efficient way
const tags = Array.from(
  new Set(
    blogEntries
      .map((entry) => {
        return entry.data.tags;
      })
      .flat()
  )
);

interface Props {
  name: string;
}

const { name } = Astro.props;
---

<div>
  <button data-popover="popover-tags" type="button" class="">{name}</button>
  <div
    data-popover-target="popover-tags"
    id="popover-default"
    role="tooltip"
    class="absolute invisible z-20 max-w-md px-5 pt-5 pb-4 mt-1 mr-6 space-y-2 bg-white rounded-md shadow-md md:mr-0 dark:bg-slate-300"
  >
    <div class="flex items-start justify-between">
      <div class="text-sm font-normal">TAGS</div>
      <button id="popover-close-btn" class="text-gray-500 hover:text-gray-700">
        <svg
          fill="none"
          stroke="currentColor"
          stroke-width="1.5"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
          aria-hidden="true"
          class="w-6 h-6"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    <div class="px-3 py-2">
      <div class="flex flex-wrap">
        <a
          href="/"
          class="inline-block px-3 py-1 mb-2 mr-2 text-sm font-medium text-justify text-gray-700 bg-gray-200 rounded-3xl"
        >
          #All
        </a>
        {
          tags.map((tag) => (
            <a
              href={createSlug(tag || '')}
              class="inline-block px-3 py-1 mb-2 mr-2 text-sm font-medium text-justify text-gray-700 bg-gray-200 rounded-3xl"
            >
              #{tag}
            </a>
          ))
        }
      </div>
    </div>
  </div>
</div>

<script>
  const popoverButton = document.querySelector<HTMLButtonElement>(
    '[data-popover="popover-tags"]'
  );
  const popoverPanel = document.querySelector<HTMLDivElement>(
    '[data-popover-target="popover-tags"]'
  );
  const popoverCloseBtn =
    document.querySelector<HTMLButtonElement>('#popover-close-btn');

  popoverButton?.addEventListener('click', (event) => {
    event.stopPropagation();
    popoverPanel?.classList.toggle('invisible');
  });

  popoverCloseBtn?.addEventListener('click', (event) => {
    event.stopPropagation();
    popoverPanel?.classList.toggle('invisible');
  });
</script>
