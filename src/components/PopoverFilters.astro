---
import { getCollection } from 'astro:content';
import { createSlug } from 'src/utils';
import Icon from './Icon.astro';
import Tag from './Tags/Tag.astro';

const blogEntries = await getCollection('blog');

// TODO: to change more efficient way
const tags = Array.from(
  new Set(
    blogEntries
      .map((entry) => {
        return entry.data.tags;
      })
      .flat()
  )
);

interface Props {
  name?: string;
}

const { name = '' } = Astro.props;
---

<div>
  <button
    data-popover="popover-tags"
    type="button"
    class="pb-1 italic text-lg tracking-wide dark:text-slate-50 font-light uppercase border-b border-gray-500 border-dashed"
    >{name}</button
  >
  <div
    data-popover-target="popover-tags"
    id="popover-default"
    role="tooltip"
    class="absolute invisible z-20 max-w-md px-5 pt-5 pb-4 mt-1 mr-6 space-y-2 bg-white rounded-md shadow-md md:mr-0 dark:bg-slate-800"
  >
    <div class="flex items-start justify-between">
      <div class="text-sm font-normal dark:text-slate-50">TAGS</div>
      <button
        id="popover-close-btn"
        class="text-gray-500 hover:text-gray-700 dark:text-slate-50"
      >
        <Icon icon="close" class="w-6 h-6 dark:text-slate-50" />
      </button>
    </div>
    <div class="px-3 py-2">
      <div class="flex flex-wrap">
        <a
          href="/"
          class="inline-block px-3 py-1 mb-2 mr-2 text-xs font-medium text-justify text-gray-700 dark:text-gray-50 bg-gray-200 dark:bg-slate-700 rounded-3xl"
        >
          All
        </a>
        {
          tags.map((tag) => (
            <Tag
              name={tag || ''}
              class="inline-block text-xs text-justify mr-2 px-3 py-1 mb-2 font-medium text-gray-700 dark:text-gray-50 bg-gray-200 dark:bg-slate-700 rounded-3xl"
            />
          ))
        }
      </div>
    </div>
  </div>
</div>

<script>
  const popoverButton = document.querySelector<HTMLButtonElement>(
    '[data-popover="popover-tags"]'
  );
  const popoverPanel = document.querySelector<HTMLDivElement>(
    '[data-popover-target="popover-tags"]'
  );
  const popoverCloseBtn =
    document.querySelector<HTMLButtonElement>('#popover-close-btn');

  popoverButton?.addEventListener('click', (event) => {
    event.stopPropagation();
    popoverPanel?.classList.toggle('invisible');
  });

  popoverCloseBtn?.addEventListener('click', (event) => {
    event.stopPropagation();
    popoverPanel?.classList.toggle('invisible');
  });
</script>
